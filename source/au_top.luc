module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    
    
    // LED For Both Players
    output io_led [3][8],  
    output io_led1[1][8],
    
    // Buttons
    input io_dip [2][8],  
    
    // Extras
    input io_button[5], 
    
    // SEGMENTS
    output io_seg[7],
    output io_sel[2],
    
    output io_seg2[7],
    output io_sel2[2],
    
    output io_seg3[7],
    output io_sel3[2],
    
    output io_seg4[7],
    output io_sel4[1]
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {

    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.

    /******************************************************************
      This is how you define button conditioners and edge detectors!

    button_conditioner btn_cond1; //button conditioner
    edge_detector edge_btn1(#RISE(1), #FALL(0)); //edge detector

    *******************************************************************/

    //FOR START BUTTON
    button_conditioner start_button_cond;
    edge_detector edge_start_button(#RISE(1), #FALL(0));
    
    //FOR RESET BUTTON
    //button_conditioner reset_cond;
    //edge_detector edge_reset_button(#RISE(1), #FALL(0));


    //FOR PLAYER BUTTONS. PLAYER 1
    button_conditioner p1_button1;
    edge_detector edge_p1_button1(#RISE(1), #FALL(0));
    button_conditioner p1_button2;
    edge_detector edge_p1_button2(#RISE(1), #FALL(0));
    button_conditioner p1_button3;
    edge_detector edge_p1_button3(#RISE(1), #FALL(0));
    button_conditioner p1_button4;
    edge_detector edge_p1_button4(#RISE(1), #FALL(0));

    //PLAYER2 
    /*
    button_conditioner p2_button1;
    edge_detector edge_p2_button1(#RISE(1), #FALL(0));
    button_conditioner p2_button2;
    edge_detector edge_p2_button2(#RISE(1), #FALL(0));
    button_conditioner p2_button3;
    edge_detector edge_p2_button3(#RISE(1), #FALL(0));
    button_conditioner p2_button4;
    edge_detector edge_p2_button4(#RISE(1), #FALL(0));
    */

    //FOR SLOW TIMER
    edge_detector edge_detector_slow_timer(#RISE(1), #FALL(0));
    //edge_detector edge_detector_variableCounter (#RISE(1), #FALL(0)); //Unused, delete if not needed.


    .rst(rst) {

      counter slow_timer(#SIZE(1),#DIV(26)); //The higher the DIV, the slower the clock

      /******************************************************************
        This is how you define registers!

      dff led_register[16](#INIT(0));
      *******************************************************************/

      pn_gen random; //Pseudorandom number generator
      //Assign our FSM to game_fsm
      beta game_beta; //define beta datapath
    }
  }
  
  /*
  alu16 alu; //Probably will move this to REGFILE
  */
  
  always {
  
    
    //These are initial values that are generated in the au_top of every IO Element Base projects. Do not touch them!
    usb_tx = usb_rx;        // echo the serial data
    
    io_sel = 0;
    io_sel2 = 0;
    io_sel3 = 0;
    io_sel4 = 0;   
    
    
    io_led = 3x{{8h00}};
    io_led1 = 1x{{8h00}};
    
    io_seg = b0;
    io_seg2 = b0;
    io_seg3 = b0;
    io_seg4 = b0;
    
    
    //////////////////////////////
    
    
    
    //Used to generate our random sequence. The same seed is used on reset.
    random.seed = 128h843233523a613966423b622562592c62;
    random.next = edge_detector_slow_timer.out;


    //Edge detector for slow timer
    edge_detector_slow_timer.in = slow_timer.value;
       
    
    
    //Inputs that we pass to the FSM
    game_beta.dec = edge_detector_slow_timer.out;
    game_beta.rng16 = random.num[15:0];

    
    
    //START Button
    start_button_cond.in = io_dip[1][0]; //MUST use ~ for button (Not sure why, but it is how it is)
    edge_start_button.in = start_button_cond.out;
    game_beta.start_button = edge_start_button.out;
    
    
    
    
    /*RESET button
    reset_cond.in = io_dip[1][1];
    edge_reset_button.in = reset_cond.out;
    */
        
    
    
    
    // Player 1
    p1_button1.in = io_dip[0][0]; //A27
    p1_button2.in = io_dip[0][1]; //A28
    p1_button3.in = io_dip[0][2]; //A30
    p1_button4.in = io_dip[1][3]; //A31

    edge_p1_button1.in = p1_button1.out;
    edge_p1_button2.in = p1_button2.out;
    edge_p1_button3.in = p1_button3.out;
    edge_p1_button4.in = p1_button4.out;
       
    
  
    game_beta.p1_button1 = edge_p1_button1.out;
    game_beta.p1_button2 = edge_p1_button2.out;
    game_beta.p1_button3 = edge_p1_button3.out;
    game_beta.p1_button4 = edge_p1_button4.out;
    
    
    
    /*
    // Player 2
    p2_button1.in = io_dip[0][4]; //B27
    p2_button2.in = io_dip[0][5]; //B28
    p2_button3.in = io_dip[0][6]; //B30
    p2_button4.in = io_dip[0][7]; //B31

    edge_p2_button1.in = p2_button1.out;
    edge_p2_button2.in = p2_button2.out;
    edge_p2_button3.in = p2_button3.out;
    edge_p2_button4.in = p2_button4.out;
    
    
    */
    
    //Light up the main timer 7 segment
    //io_seg = game_beta.main_timer_segs; 
    //io_sel = game_beta.main_timer_sel;
    
    //Light up the mini timer 7 segment
    //io_seg2 = game_beta.mini_timer_5_segs;
    
    
    
    
    
    
    
    
  }
}